---
title: Composite Dockerfile Generation Logic
description: Documents the correct process and logic for generating the self-contained Dockerfile.composite.
tags:
    - type:should
    - domain:build
    - scope:ci
    - tech:docker
    - tech:make
    - tech:sed
---
The `Dockerfile.composite` is generated by the `composite-dockerfile` target in `Makefile.language-container.mk`. It is crucial that this file is self-contained and does not reference local Docker images that would not be present in a clean CI environment.

### Correct Generation Logic

The generation process involves two key steps after each language's `Dockerfile` content is appended to the composite file:

1.  **Aliasing the Primary `FROM`:** The very first `FROM` instruction in a given language's Dockerfile snippet is appended with `AS o<TAG_PATH_ROOT>_<language_dir>`. This turns the image into a named stage in the multi-stage build. This is done with the `sed "0,/^FROM/s/..."` command.

2.  **Rewriting Local Dependencies:** After the primary `FROM` is aliased, any *other* `FROM` statements within that same Dockerfile snippet that reference a local image (e.g., `FROM 100hellos/050-c:local`) must be rewritten to refer to the corresponding named stage (e.g., `FROM o100hellos_050-c`).

### The Helper Script

To handle the complexity and ensure robustness, a helper script, `.utils/fix_composite_dockerfile.sh`, is used. This script is executed after all language Dockerfiles have been concatenated. It uses the following `sed` command to perform the final, correct substitution:

\`\`\`bash
sed -i "s|FROM \${TAG_PATH_ROOT}/\\([^:]*\\):local|FROM o\${TAG_PATH_ROOT}_\\1|g" "\${DOCKERFILE}"
\`\`\`

This pattern ensures that only images with the `:local` tag are rewritten, leaving legitimate upstream dependencies (e.g., `:latest`) untouched. Adhering to this process is critical for maintaining a reliable CI build.
