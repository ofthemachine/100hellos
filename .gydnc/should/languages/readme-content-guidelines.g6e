---
title: 100hellos Documentation Standards
description: Complete standards for all documentation in 100hellos language implementations, covering content guidelines and testing requirements
tags:
    - domain:languages
    - project:100hellos
    - scope:documentation
    - type:should
---
# 100hellos Documentation Standards

Complete standards for all documentation in 100hellos language implementations, covering content guidelines and testing requirements.

## README.md Content Guidelines

### Understanding the DockerHub Context

Language README.md files are published to DockerHub **after** the overview template (`.github/bin/overview-template.md`) is automatically prepended. The overview template already provides:

- **Title**: "Hello World! From [lang]"
- **GitHub link**: Direct link to the language's source files
- **"Trying it" section**: Correct Docker run commands
- **"Modifying it" section**: Instructions for interactive development

### What Language README.md Should Include

✅ **Language-specific information only**:
- Description of the language and its unique features
- Interesting facts about the language
- Explanation of non-obvious "Hello World!" code
- Language history, creator, or notable characteristics
- Suggestions for further exploration (but NO Docker commands)

### What to Avoid in Language README.md

❌ **Redundant information**:
- Docker run commands (already in overview template)
- Container usage instructions (already covered)
- Generic "try it out" sections with Docker commands
- Redundant information about building/running containers

### Recommended README Structure

```markdown
# [Language Name] - [Tagline]

[Language description and what makes it special]

## What makes [Language] special?

- Unique feature 1
- Unique feature 2
- Performance characteristics

## The "Hello World!" explanation

[If the Hello World code is non-obvious, explain it]

## Fun [Language] facts

- Historical information
- Interesting trivia
- Notable uses or users

## Explore [Language] further

[Suggestions for learning more - but NO Docker commands]
```

## Documentation Testing Requirements

### The Critical Requirement

**ALL examples in language documentation MUST be tested in the actual container environment before committing.**

### Why This Matters

- **User experience**: Users trust that documented examples work
- **Language adoption**: Broken examples frustrate newcomers
- **Project credibility**: Working examples demonstrate quality
- **Debugging efficiency**: Tested examples reduce support burden

### Testing Process

#### 1. Use the Actual Container Environment

Always test examples using the built container, not your local environment:

```bash
# Build and test the language first
make [lang] R=1

# Test examples interactively
docker run --rm --entrypoint="" -it 100hellos/[lang]:local zsh

# Or test specific commands non-interactively
docker run --rm --entrypoint="" 100hellos/[lang]:local [command]
```

#### 2. Test Every Example Command

For each example in your README:
- Copy the exact command/code from your documentation
- Run it in the container environment
- Verify it produces the expected output
- Fix both the example AND the documentation if they don't match

#### 3. Implementation-Specific Considerations

Different language implementations may have:
- **Different command flags**: (e.g., `-c` vs `-e` in BQN)
- **Limited symbol support**: (e.g., CBQN vs other BQN implementations)
- **Version differences**: (e.g., Python 2 vs 3 syntax)
- **Container-specific limitations**: (e.g., missing libraries)

#### 4. Complete Testing Workflow

```bash
# 1. Build and basic test
make [lang] R=1

# 2. Test each example from README
docker run --rm --entrypoint="" 100hellos/[lang]:local [example-command-1]
docker run --rm --entrypoint="" 100hellos/[lang]:local [example-command-2]
# ... continue for all examples

# 3. If any fail, fix the example AND the documentation
# 4. Re-test to confirm
```

### Anti-Patterns to Avoid

❌ **Assuming local environment equals container environment**
❌ **Copying examples from online sources without testing**
❌ **Using examples from different language implementations**
❌ **Testing examples only in development, not final container**

## Integration with Language Addition Workflow

Documentation testing should be part of the standard language addition process:

1. Implement language
2. Test basic functionality (`make [lang] R=1`)
3. Write README with examples
4. **Test all examples in container** ← Critical step
5. Fix any issues found
6. Commit

## Key Principle

**Remember**: The overview template handles all the "how to run" information. The language README should focus purely on "what makes this language interesting and worth exploring." And every example must work in the actual container environment.

If an example doesn't work in the container, it doesn't work for users.
