---
title: How to Add a New Language to 100hellos
description: A comprehensive guide to adding new languages, covering simple, compiled, and complex build-from-source scenarios with security best practices.
tags:
    - project:100hellos
    - scope:languages
    - security:best-practice
    - type:recipe
---
# How to Add a New Language to 100hellos

This guide provides a comprehensive, step-by-step process for adding a new programming language to the `100hellos` repository. This guidance supersedes previous versions and clarifies the central role of the `entrypoint.sh` script.

## Core Requirements

Before you begin, ensure you adhere to these core project standards.

### 1. The "Hello World!" String

The output of your program **MUST** be exactly `Hello World!`.

- **Correct:** `Hello World!`
- **Incorrect:** `Hello, World!`, `hello world!`, or any other variation.

This strictness is essential for the automated testing and validation processes.

---

## 1. Bootstrap the New Language

This step remains the same. Use the make command to create the language directory.
`make new HELLO=[lang]`

## 2. Configure the Build and Run Process

This is the most critical step. Your goal is to provide an executable file that the base container's `entrypoint.sh` can run. The entrypoint first looks for `hello-world.sh`. If it doesn't find it, it looks for `hello-world.*` and makes it executable. There are two primary patterns to accomplish this.

### Pattern 1: Interpreted Languages (Shebang)

For interpreted languages like Python, Ruby, or Janet, the process is straightforward.

1.  **`[lang]/Dockerfile`**: Install the language runtime (e.g., `apk add python3`). **Do not add a `CMD`**.
2.  **`[lang]/files/hello-world.[ext]`**: Write your "Hello World!" code and, most importantly, **start the file with a shebang** that points to the interpreter. The `entrypoint.sh` script will use this shebang to execute your file.

**Example (`python`):**

*python/files/hello-world.py:*
```python
#!/usr/bin/env python3

print("Hello World!")
```

*python/Dockerfile:*
```dockerfile
# syntax=docker/dockerfile:1
# escape=\
FROM 100hellos/000-base:local

RUN sudo apk add --no-cache python3

# NO CMD HERE!
COPY --chown=human:human ./files /hello-world
```

### Pattern 2: Compiled Languages (`hello-world.sh`)

For compiled languages like Rust, Go, or C++, you must provide a `hello-world.sh` script that the entrypoint can execute.

1.  **`[lang]/Dockerfile`**: Install the language compiler (e.g., `apk add rust`). **Do not add a `CMD`**.
2.  **`[lang]/files/hello-world.sh`**: This script is responsible for compiling your source code and then running the resulting binary.
3.  **`[lang]/files/hello-world.[ext]`**: Your standard "Hello World!" source code, without a shebang.

**Example (`rust`):**

*rust/files/hello-world.sh:*
```bash
#!/bin/sh
# Compile the rust source file
rustc /hello-world/hello-world.rs -o /tmp/hello
# Execute the compiled binary
/tmp/hello
```

*rust/files/hello-world.rs:*
```rust
fn main() {
    println!("Hello World!");
}
```

*rust/Dockerfile:*
```dockerfile
# syntax=docker/dockerfile:1
# escape=\
FROM 100hellos/000-base:local

RUN sudo apk add --no-cache rust

# NO CMD HERE! The entrypoint will find and run hello-world.sh
COPY --chown=human:human ./files /hello-world
```

## 3. Complex Builds and Security

-   **Complex Builds:** The `artifacts` pattern for building languages from source remains a valid and powerful technique for caching. The `Dockerfile` should still perform the build, but it should not have a `CMD`. The goal of the complex build is to get the language runtime/compiler into the `PATH` so that the shebang or `hello-world.sh` script can use it.
-   **Security:** The security best practices (pinning versions, verifying downloads with checksums, using `COPY --chown`) are still critical and should be followed.

## 4. Test

The testing process remains the same.
-   Run `make [lang] R=1` to test.

## 5. Finalize and Clean Up

Before committing, ensure your contribution is complete and clean.

-   **Create the `README.md` file:** Every language folder **MUST** include a `README.md`. This file is displayed on Docker Hub. Make it fun and informative! Go beyond a simple description and include interesting facts or unique features of the language.
-   **Remove Unused Template Files:** The `make new` command creates template files and directories to help you get started. **You MUST remove any that you do not use.** The most common example is the `artifacts/` directory, which should be deleted if your build process does not use it.

## 6. Commit

-   Commit with a creative message as per `recipes/git/100hellos-commit-style`.
