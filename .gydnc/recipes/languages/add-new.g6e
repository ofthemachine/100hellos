---
title: Complete Guide to Adding Languages to 100hellos
description: Consolidated, definitive guide for adding new programming languages to 100hellos, merging all requirements, processes, and best practices
tags:
    - project:100hellos
    - scope:languages
    - security:best-practice
    - type:recipe
---
# Complete Guide to Adding Languages to 100hellos

This is the definitive guide for adding new programming languages to the 100hellos project, consolidating all requirements, processes, and best practices.

## Pre-Addition: Mandatory Verification

**CRITICAL**: Before implementing any language, you MUST verify it doesn't already exist using the methodical verification process outlined in `must/methodical-language-verification`.

## Core Requirements

### 1. The "Hello World!" String
The output of your program **MUST** be exactly `Hello World!` (not `Hello, World!` or any other variation).

### 2. Authentic Implementation
**ABSOLUTE REQUIREMENT**: Must use real language interpreters/compilers - no fake or shell script simulations.

**❌ FORBIDDEN APPROACHES:**
- Creating shell scripts that just echo "Hello World!"
- Using fake interpreters or simulators that don't actually execute the language
- Fallback scripts that bypass the actual language entirely
- Any implementation that doesn't genuinely run code in the target language

**✅ REQUIRED APPROACHES:**
- Install and use the actual language interpreter/compiler
- Execute genuine code written in the target language
- Even if the language requires complex setup, it must be authentic

**If a language cannot be authentically implemented on Alpine Linux due to fundamental incompatibilities (e.g., requires specific glibc versions not available in musl), the language should be rejected rather than simulated.**

### 3. MUSL Compatibility
Prioritize MUSL-compatible languages for Alpine Linux base compatibility. When evaluating languages:

1. **First Priority**: Languages with native musl support or available in Alpine packages
2. **Second Priority**: Languages that can be built from source with musl compatibility
3. **Reject**: Languages that fundamentally require glibc and cannot be made to work with musl

## Implementation Process

### 1. Bootstrap the Language
```bash
make new HELLO=[lang]
```
This command:
- Creates the language directory structure
- Automatically decrements the counter in root README.md
- **CRITICAL**: Never manually modify the counter - let `make new` handle it

### 2. Configure Build and Run Process

Your goal is to provide an executable that the base container's `entrypoint.sh` can run.

#### Pattern A: Interpreted Languages (Shebang)
For languages like Python, Ruby, Janet:

1. **`[lang]/Dockerfile`**: Install language runtime, **no CMD**
2. **`[lang]/files/hello-world.[ext]`**: Code with proper shebang

Example:
```python
#!/usr/bin/env python3
print("Hello World!")
```

#### Pattern B: Compiled Languages (hello-world.sh)
For languages like Rust, Go, C++:

1. **`[lang]/Dockerfile`**: Install compiler, **no CMD**
2. **`[lang]/files/hello-world.sh`**: Script that compiles and runs **the actual language code**
3. **`[lang]/files/hello-world.[ext]`**: Source code without shebang

Example hello-world.sh:
```bash
#!/bin/sh
rustc /hello-world/hello-world.rs -o /tmp/hello
/tmp/hello
```

**CRITICAL**: The `hello-world.sh` script must compile and execute actual source code in the target language, not simulate the output.

### 3. Handling Compatibility Challenges

When encountering musl/glibc or other compatibility issues:

#### ✅ ACCEPTABLE SOLUTIONS:
- Build the language from source with musl-compatible flags
- Use alternative implementations designed for musl (e.g., TinyGo instead of standard Go)
- Install 32-bit compatibility layers if they work with musl
- Use edge or testing repositories if they contain musl-compatible packages
- Cross-compile binaries specifically for musl

#### ❌ UNACCEPTABLE SOLUTIONS:
- Creating shell script "fallbacks" that don't use the language
- Simulating language output without running actual language code
- Using any approach that doesn't genuinely execute the target language

#### When to Reject a Language:
- Pre-built binaries only work with glibc and source code cannot be compiled for musl
- Language runtime fundamentally requires glibc-specific features
- No viable path exists to run authentic language code on Alpine Linux
- Implementation would require compromising the authentic execution requirement

### 4. MANDATORY: Verify Existing Packages Before Adding Dependencies

**CRITICAL**: Before writing any `RUN apk add...` command, you **MUST** first check which packages are already available in the base image to avoid redundant and unnecessary installations. This is not an optional step.

#### Check Base Image Contents
```bash
# Check what packages/tools are already available
docker run --rm --entrypoint="" 100hellos/000-base:local zsh -c "which wget tar make git curl"

# Check specific base image contents
cat .base/Dockerfile
```

#### Common Tools Already in Base Images
The following are typically already available and should **NOT** be reinstalled:
- `wget`, `curl` - for downloading
- `tar`, `unzip` - for extracting archives
- `git` - version control
- `make` - build tool
- `zsh`, `sudo` - shell and privilege escalation

#### Example: Good vs Bad Dockerfile Practices
```dockerfile
# ❌ BAD: Redundant packages already in base
RUN sudo apk add --no-cache wget tar build-base go

# ✅ GOOD: Only install what's actually needed
RUN sudo apk add --no-cache go
```

### 5. Use Appropriate Base Images
- Use language-specific base images when possible (e.g., `100hellos/300-node:local`)
- **DO NOT** reinstall common utilities already in base images

### 6. CRITICAL DOCKERFILE COPY PATTERN

**MANDATORY**: When copying files in Dockerfiles, you **MUST** use the `./files` pattern to ensure compatibility with the `make composite-dockerfile` target:

```dockerfile
# ✅ CORRECT: Use ./files (note the dot-slash)
COPY --chown=human:human ./files /hello-world

# ❌ WRONG: Using just files/ breaks composite generation
COPY --chown=human:human files/ /hello-world
```

**Why this matters**: The `make composite-dockerfile` target uses sed to transform COPY paths, and it's designed to work with the `./files` pattern. Using just `files/` will break the composite Dockerfile generation.

### 7. Test Implementation
```bash
make [lang] R=1
```
Verify exact "Hello World!" output.

### 8. Documentation Requirements

#### Create README.md
Every language **MUST** include a README.md following these guidelines:

**Focus on language-specific content only**:
- Language description and unique features
- Interesting facts about the language
- Explanation of non-obvious "Hello World!" code
- Language history or notable characteristics
- Suggestions for further exploration

**Avoid redundant content**:
- Docker run commands (handled by overview template)
- Generic container usage instructions
- Redundant build/run information

#### Test All Documentation Examples
**CRITICAL**: Test every example in your README within the actual container environment:

```bash
# Test examples interactively
docker run --rm --entrypoint="" -it 100hellos/[lang]:local zsh

# Or test specific commands
docker run --rm --entrypoint="" 100hellos/[lang]:local [command]
```

All examples must work in the container environment before committing.

### 9. Clean Up Template Files and Content
- Remove all unused template files created by `make new`.
- **CRITICAL**: From the remaining template files (like `hello-world.sh`), remove all boilerplate comments and instructions, leaving only the essential code.

Example files to remove:
- `artifacts/` directory (if unused)
- Placeholder `files/hello-world.sh` script (if unused)
- Placeholder `files/hello-world.lang` file
- `README.scaffolding` file

## Git Commit Process

### 1. Always Include Root README.md
**CRITICAL**: The `make new` command modifies root README.md (decrements counter). This file MUST be committed along with your language files.

### 2. Use Single Quotes for Commit Messages
- ✅ `git commit -m 'Language says Hello!'`
- ❌ `git commit -m "Language says Hello!"` (can cause shell hanging)

### 3. Follow Creative Commit Style
Format: `[Language] [creative verb] Hello!`

Examples:
- `Janet says Hello!`
- `Zombie moans Helllllo!`
- `Ballerina pirouettes Hello!`

## Rollback Procedure

**If you need to back out a failed language implementation, you MUST revert BOTH changes made by `make new`:**

1. **Delete the language directory**: `rm -rf [lang]/`
2. **CRITICAL: Also restore README.md counter**: `git checkout HEAD -- README.md`

**Why both steps are needed**: The `make new` command makes two changes:
- Creates the language directory
- Decrements the language counter in root README.md

Both changes must be reverted to maintain correct language counts and project state.

**Complete rollback example**:
```bash
# For a failed "lobster" implementation
rm -rf lobster/
git checkout HEAD -- README.md
```

## Common Pitfalls

1. **Silent Validation Failure**: Empty placeholder `hello-world.sh` left behind
2. **"too many arguments" Error**: Multiple `hello-world.*` files match the glob
3. **Forgetting root README.md**: Always commit the decremented counter
4. **Manual counter modification**: Let `make new` handle counter automatically
5. **Untested documentation**: Examples that don't work in container environment
6. **Double-quote commit issues**: Use single quotes to avoid shell problems
7. **Redundant package installation**: Adding packages already in base images
8. **Missing dependency research**: Not checking if a language requires specific toolchains
9. **Shell script simulation**: Creating fake implementations instead of authentic language execution
10. **Compatibility shortcuts**: Using fallback approaches instead of solving musl/glibc issues properly
11. **WRONG COPY PATTERN**: Using `files/` instead of `./files` breaks composite Dockerfile generation
12. **INCOMPLETE ROLLBACK**: Forgetting to restore README.md counter when backing out a failed implementation

## Security and Complex Builds

- **Version Pinning**: Always pin specific versions
- **Checksum Verification**: Verify downloads with checksums
- **Proper Ownership**: Use `COPY --chown=human:human ./files` (note the `./files` pattern)
- **Artifacts Pattern**: Valid for caching complex builds, but no CMD in Dockerfile

## Complete Workflow Summary

1. **Verify** language doesn't exist (`must/methodical-language-verification`)
2. **Bootstrap** with `make new HELLO=[lang]`
3. **Verify existing packages** in the base image *before* adding dependencies
4. **Implement** Dockerfile and source code (only adding necessary packages)
5. **Use correct COPY pattern**: `COPY --chown=human:human ./files /hello-world`
6. **Ensure authentic implementation** - the language must genuinely execute, not be simulated
7. **Test** with `make [lang] R=1`
8. **Document** with comprehensive README.md
9. **Test documentation** examples in container
10. **Clean up** unused template files and their boilerplate content
11. **Commit** with creative message including root README.md
12. **If rollback needed**: Remove directory AND restore README.md counter

This consolidated guide replaces the need for multiple separate language addition documents and provides the complete, authoritative process.
