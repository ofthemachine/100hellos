---
title: How to Install Packages from Alpine Edge
description: A recipe for how to correctly install packages from the Alpine Linux 'edge' repository by adding both the 'main' and 'community' sources.
tags:
    - domain:build
    - tech:alpine
    - tech:docker
    - type:recipe
---
# How to Install Packages from Alpine Edge

When a required package is not available in the stable Alpine repository of the base image, you may need to pull from the `edge` repository.

## The Current Pattern (Updated)

Based on the established patterns in the codebase (see `deno/Dockerfile` and `odin/Dockerfile`), the correct approach is:

```dockerfile
# Add both edge repositories to ensure dependency resolution
RUN echo "https://dl-cdn.alpinelinux.org/alpine/edge/main" | sudo tee -a /etc/apk/repositories
RUN echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" | sudo tee -a /etc/apk/repositories

# Update package lists (required after adding new repositories)
RUN sudo apk update

# Install your package
RUN sudo apk add --no-cache your-package-name
```

## Why Both Repositories?

Adding just the `edge/community` repository might cause installation to fail with dependency errors. Packages from `edge/community` often depend on newer versions of core libraries that are in `edge/main`.

## Examples in the Codebase

- **Deno**: Uses this pattern to install deno from edge
- **Odin**: Uses this pattern to get newer LLVM versions
- **Gleam**: Should use this pattern to install gleam from edge

The key elements are:
1. Add both edge/main and edge/community repositories
2. Run `apk update` after adding repositories
3. Install the package with `--no-cache`
